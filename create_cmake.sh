#!/bin/bash

# --- Configuration ---
# The root directory to scan for sub-projects (passed as an argument)
SRC_ROOT="$1"
# The name of the output file
OUTPUT_FILE="CMakeLists.txt"
# The main project name
PROJECT_NAME="Realms"

# --- Safety Check ---
if [ -z "$SRC_ROOT" ]; then
    echo "Error: No source directory provided."
    echo "Usage: $0 <path-to-source-directory>"
    echo "Example: $0 src"
    exit 1
fi

if [ ! -d "$SRC_ROOT" ]; then
    echo "Error: Directory '$SRC_ROOT' not found."
    exit 1
fi

# --- Header ---
# Write the CMakeLists.txt header
cat > "$OUTPUT_FILE" <<- EOL
# Generated by $0 on $(date)
cmake_minimum_required(VERSION 3.10)
project(${PROJECT_NAME})

# --- Add all sub-projects as executables ---

EOL

echo "Generating ${OUTPUT_FILE} from directories in ${SRC_ROOT}..."

# --- Find Sub-directories ---
# Use find -print0 and read -d '' to safely handle names with spaces.
# -mindepth 1/-maxdepth 1 ensures we only get immediate children.
find "$SRC_ROOT" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d '' dir_path; do
    
    # Get the plain name of the directory (e.g., "src/app1" -> "app1")
    TARGET_NAME=$(basename "$dir_path")

    echo " + Found project: ${TARGET_NAME}"

    # --- Find Source Files ---
    # Build a list of all .c, .cpp, and .cxx files in this sub-directory.
    # We use another 'find | while' loop to build a list.
    SOURCE_LIST=""
    while IFS= read -r -d '' source_file; do
        # Add the file to the list, indented and quoted for CMake
        SOURCE_LIST+="\n    \"$source_file\""
    done < <(find "$dir_path" -name "*.pas" -o -name "*.pas" -o -name "*.ppu" -print0)

    # --- Write to CMakeLists.txt ---
    if [ -n "$SOURCE_LIST" ]; then
        # Write the add_executable() command
        echo "# Executable for ${TARGET_NAME}" >> "$OUTPUT_FILE"
        echo "add_executable(${TARGET_NAME}${SOURCE_LIST}" >> "$OUTPUT_FILE"
        echo ")" >> "$OUTPUT_FILE"
        
        # Also add its own directory as an include path
        echo "target_include_directories(${TARGET_NAME} PUBLIC" >> "$OUTPUT_FILE"
        echo "    \"$dir_path\"" >> "$OUTPUT_FILE"
        echo ")" >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
    else
        echo " - Warning: No Pascal source files found in ${dir_path}. Skipping target."
    fi

done

echo "Generation complete."